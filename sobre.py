import streamlit as st
import graphviz

# Fun√ß√£o para gerar o fluxograma com o loop de intera√ß√£o entre usu√°rio e dados
def criar_fluxograma():
    dot = graphviz.Digraph(comment='Fluxograma Atualizado do Projeto')

    # Configura√ß√µes globais do grafo
    dot.attr(rankdir='TB', size='12')  # Fluxo da esquerda para direita (Left -> Right)
    dot.attr('node', shape='box')  # Usar caixas retangulares para os n√≥s

    # Usu√°rio no topo
    dot.node('U', label='Usu√°rio', style='filled', color='coral')

    # Frontend e Bot√µes de Controle
    with dot.subgraph(name='cluster_frontend') as frontend:
        frontend.attr(label='FrontEnd', style='filled', color='lightyellow')
        frontend.node('manager', 'Gerenciador de S√©ries\n[data_editor]')
        frontend.node('normalizar', 'Normalizar\nvalores\n[checkbox]')
        frontend.node('data_min', 'Data M√≠nima\n[date_input]')
        frontend.node('data_max', 'Data M√°xima\n[date_input]')
        frontend.node('nulos', '"Tratatamento\nde nulos"\n[selectbox]')
        frontend.node('novas_series', '"Sele√ß√£o\nde S√©ries"\n[dataframe]')
        frontend.node('comuns', '"Usar datas\ncomuns"\n[toggle]')
        frontend.node('aplicar', '[button]\nAplicar')
        
    with dot.subgraph() as same_rank:
        same_rank.attr(rank='same')
        same_rank.node('configuracoes', 'Configura√ß√µes')
        
        same_rank.node('processamento', 'Processamento')
        
    # Agrupamento dos DataFrames
    with dot.subgraph(name='Backend') as dataframes:
        dataframes.attr(label='BackEnd', style='filled', color='lightblue', same_rank='same')
        dataframes.attr(rank='same')
        dataframes.node('df_main', 'df_main\n(s√©ries de df_editado aplicados)')
        dataframes.node('df_editado', 'df_editado\n(df_original com ajustes do usu√°rio)')
        dataframes.node('df_original', 'df_original\n(combina df_main com novas s√©ries)')
        
    
    # Definindo o rank para manter df_main e df_editado no mesmo n√≠vel
    with dot.subgraph() as same_rank:
        same_rank.attr(rank='same')
        same_rank.node('df_main')
        same_rank.node('df_original')
        same_rank.node('df_editado')
        same_rank.node('manager')
    
    # Adicionando arestas (setas) entre os elementos para definir o fluxo
    dot.edge('U', 'comuns')
    dot.edge('comuns', 'processamento')
    dot.edge('df_editado', 'configuracoes')
    dot.edge('U', 'novas_series')
    dot.edge('U', 'nulos')
    dot.edge('U', 'data_min')
    dot.edge('data_min', 'manager', dir='both')
    dot.edge('U', 'data_max')
    dot.edge('data_max', 'manager', dir='both')
    dot.edge('U', 'normalizar')
    dot.edge('novas_series', 'df_original')
    dot.edge('df_main', 'df_original')
    dot.edge('df_original', 'processamento')
    dot.edge('processamento', 'df_editado')
    dot.edge('configuracoes', 'manager', dir='both')
    dot.edge('normalizar', 'manager', dir='both')
    dot.edge('nulos', 'manager', dir='both')
    dot.edge('configuracoes', 'processamento')
    dot.edge('df_editado', 'aplicar')
    dot.edge('aplicar', 'df_main')
    dot.edge('U', 'aplicar')

    return dot

# Fun√ß√£o para mostrar o fluxograma
def mostrar_fluxograma():
    st.subheader("üìä Fluxograma do Processo")
    st.write("Este fluxograma representa o fluxo de dados e opera√ß√µes no pipeline de Machine Learning utilizado neste projeto.")
    fluxograma = criar_fluxograma()
    st.graphviz_chart(fluxograma.source)

# Fun√ß√£o para as Configura√ß√µes
def mostrar_configuracoes():
    st.subheader("‚öôÔ∏è Configura√ß√µes das S√©ries Temporais")
    st.write("Defina aqui par√¢metros importantes como:")
    st.markdown("""
    - **Data M√≠nima e M√°xima**: Intervalo de tempo para a an√°lise.
    - **Normalizar Valores**: Transformar dados para a faixa entre 0 e 1.
    - **Preenchimento de Nulos**: M√©todo de preenchimento de dados ausentes.
    """)
    st.write("Essas configura√ß√µes influenciam diretamente como os dados ser√£o processados e analisados.")

# Fun√ß√£o para o Data Editor
def mostrar_data_editor():
    st.subheader("üìù Editor de Dados")
    st.write("Interaja diretamente com as s√©ries temporais e ajuste valores espec√≠ficos. O **Editor de Dados** permite:")
    st.markdown("""
    - Sele√ß√£o e edi√ß√£o de s√©ries de interesse.
    - Ajuste de intervalos de datas e tratamento de valores nulos.
    - Aplica√ß√£o de m√©todos de normaliza√ß√£o para preparar dados para an√°lise.
    """)
    st.info("Ap√≥s as edi√ß√µes, os dados s√£o enviados para o processo de transforma√ß√£o.")

# Fun√ß√£o para Processamento
def mostrar_processamento():
    st.subheader("üîÑ Processamento de Dados")
    st.write("O processamento aplica as configura√ß√µes ao **DataFrame Original (df_original)**, preenchendo valores nulos, normalizando e filtrando as s√©ries temporais com base nas escolhas feitas pelo usu√°rio.")
    st.write("O resultado √© o **DataFrame Editado (df_editado)**, pronto para o pr√≥ximo est√°gio de an√°lise ou modelagem.")



# Fun√ß√£o para apresentar informa√ß√µes sobre o projeto
def sobre_o_projeto():
    st.subheader("üìö Sobre o Projeto")
    st.write("Este √© um pipeline de Machine Learning desenvolvido para o **Projeto Integrador IV** do curso de **Computa√ß√£o** na **Univesp**.")
    st.write("O projeto utiliza t√©cnicas de pr√©-processamento de s√©ries temporais, como normaliza√ß√£o, tratamento de dados ausentes e intervalos de data, que s√£o etapas fundamentais para modelagem preditiva.")
    st.markdown("""
    ### Objetivo
    Fornecer uma interface intuitiva para a sele√ß√£o e manipula√ß√£o de s√©ries temporais, facilitando o fluxo de trabalho de pr√©-processamento de dados para uso em modelos de Machine Learning.
    """)
    st.markdown("### P√∫blico-Alvo")
    st.write("Estudantes e profissionais de Ci√™ncia de Dados e Machine Learning, especialmente aqueles interessados em manipula√ß√£o e an√°lise de s√©ries temporais.")
    st.markdown("### Ferramentas e T√©cnicas")
    st.write("""
    - **Linguagem**: Python
    - **Bibliotecas**: Streamlit, Pandas, Graphviz
    - **Assist√™ncia**: Cursos universit√°rios, pesquisas e o ChatGPT (apesar de ser um pouco insistente... üòÖ)
    """)

# Fun√ß√£o para detalhes dos autores do projeto
def sobre_os_autores():
    st.subheader("üë• Sobre os Autores")
    st.write("Este projeto foi desenvolvido por um grupo de estudantes com o objetivo de aplicar conhecimentos em ci√™ncia de dados e desenvolvimento de pipelines de machine learning.")
    for i in range(1, 5):
        st.markdown(f"""
        **Autor {i}**
        - **Nome**: 
        - **Registro Acad√™mico (RA)**: 
        - **GitHub**: [GitHub do Autor {i}](https://github.com)
        - **Curso**: Computa√ß√£o
        - **Sobre mim**: Pequeno resumo ou email para contato.
        """)

# Fun√ß√£o de instru√ß√µes de uso
def instrucoes_de_uso():
    st.subheader("üöÄ Instru√ß√µes de Uso")
    st.markdown("""
    1. **Escolha das S√©ries Temporais**: Inicie selecionando as s√©ries desejadas no painel de **Fontes de Dados** √† esquerda.
    2. **Configura√ß√£o**: Ajuste as configura√ß√µes das s√©ries temporais, incluindo datas m√≠nimas e m√°ximas, normaliza√ß√£o e tratamento de nulos.
    3. **Editor de Dados**: Revise e altere dados espec√≠ficos no editor, se necess√°rio.
    4. **Processamento**: Execute o processamento, que aplicar√° as configura√ß√µes definidas.
    5. **Salvar**: Use o bot√£o **Aplicar** para salvar o estado final em `df_main` para uso em modelos de Machine Learning.
    """)


# Fun√ß√£o para criar a p√°gina inteira
def sobre():
    st.title("üìà Gerenciamento de S√©ries Temporais")
    st.write("Bem-vindo ao pipeline de manipula√ß√£o e pr√©-processamento de s√©ries temporais!")
    
    # Sess√µes do projeto
    sobre_o_projeto()
    mostrar_fluxograma()
    instrucoes_de_uso()
    mostrar_configuracoes()
    mostrar_data_editor()
    mostrar_processamento()
    sobre_os_autores()
